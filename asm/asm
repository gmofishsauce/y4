#!/bin/bash
#
# Copyright Â© 2024 Jeff Berkowitz (pdxjjb@gmail.com)
# 
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

# NAME
#   asm - y4 assembler
#
# SYNOPSIS
#   asm sourcefile [options] [sourcefile ...] # default output written y4.out
#
# OPTIONS
#   -o outputfile
#		Specifies the name of the output binary file
#
# DESCRIPTION
#   This script runs customasm (https://github.com/hlorenzi/customasm/tree/main)
#   with an embedded ruleset that cause it to assemble the y4 instruction set.
#   If the assembler succeeds, it produces a few lines of console output; if it
#   fails, it produces hopefully-meaningful errors.
#   
#   A "bare" binary, consisting of 2-byte y4 binary opcodes, is written to the
#   the file y4.out on a successful assembly. There is not object file header.
#   The code section begins at file offset 0 and the data section at file offset
#	64*1024*2 = 128k (code space is 64k 2-byte instruction words).
#
#	There is no distinction between kernel and user executables. The runtime
#   program loader does not load into kernel space, and the boot time loader
#   does not load into user space. The hardware initializes in kernel mode.
#   Simple test programs can be loaded at zero there, run, and halt. A kernel-
#   mode binary loaded in user space may execute, but is likely to encounter an
#   illegal instruction trap.

RULES=$(mktemp rules.XXXXXXXX)
trap 'rm -rf -- "$RULES"' EXIT

function usage() {
	>&2 echo "usage: asm [-o outputfile] inputfile"
	exit 1
}

OUTPUT="./y4.out"
while getopts "o:" Option
do
  case $Option in
    o) OUTPUT=$OPTARG
  esac
done
shift $(($OPTIND - 1))

# There must be 1 or more readable files left on the command line.
# Without this, customasm produces confusing error messages in some
# easy to hit error cases, like "asm foo -o bar".
if [ $# -eq 0 ] ; then
	usage
fi
for i in $@ ; do
	if [ ! -r $i ] ; then
		usage
	fi
done

### customasm rules go below the cat. The customasm command is at the end. ###

cat > ${RULES} << 'EOF'

#bankdef code
{
	#bits 16
	#labelalign 16
    #addr 0x0000
	#addr_end 0xFFFF
	#outp 0
}

#bankdef data
{
    #bits 8
	#labelalign 8
    #addr 0x0000
	#addr_end 0xFFFF
	#outp 8 * 2 * 0x10000
}

#bank code ; set default

#subruledef reg
{
    r0 => 0o0
    r1 => 0o1
    r2 => 0o2
    r3 => 0o3
    r4 => 0o4
    r5 => 0o5
    r6 => 0o6
    r7 => 0o7
}

#subruledef imm6 ; for positive 6-bit immediates in a 7-bit field
{
	{imm: i6} => imm
}

#subruledef imm7 ; 7-bit immediate used in several instructions
{
	{imm: i7} => imm
}

#subruledef imm10 ; 10-bit immediate used in lui only
{
	{imm: i10} => imm
}

#subruledef imm16 ; 16-bit immediate used in psuedos
{
	{imm: i16} => imm
}

#ruledef ; all the ops with immediate fields, opcodes 0 through 0xExxx
{
	ldw {ra: reg}, {rb: reg}, {imm: imm7}   => le(0b000   @ imm @ rb @ ra)
	ldb {ra: reg}, {rb: reg}, {imm: imm7}   => le(0b001   @ imm @ rb @ ra)
	stw {ra: reg}, {rb: reg}, {imm: imm7}   => le(0b010   @ imm @ rb @ ra)
	stb {ra: reg}, {rb: reg}, {imm: imm7}   => le(0b011   @ imm @ rb @ ra)
	beq {ra: reg}, {rb: reg}, {adr: imm16}   => {
		reladdr = adr - $ - 1
		le(0b100   @ reladdr`7 @ rb @ ra)
	}
	adi {ra: reg}, {rb: reg}, {imm: imm7}   => le(0b101   @ imm @ rb @ ra)
	lui {ra: reg}, {imm: imm10}             => le(0b110   @ imm @ ra)

	; jlr has 0b1110 in the upper four bits.
	; jlr doesn't exist in assembler. Instead, it becomes jsr, jmp, or sys
	; these are defined under instruction aliases, below.
}

; All remaining opcodes have 0b1111 = 0xF in the upper four bits.

#ruledef ; XOPs are three-register ops. bic and bis are NAND and OR (PDP-11).
{
	add {ra: reg}, {rb: reg}, {rc: reg}  => le(0xF @ 0b000  @ rc @ rb @ ra)
	adc {ra: reg}, {rb: reg}, {rc: reg}  => le(0xF @ 0b001  @ rc @ rb @ ra)
	sub {ra: reg}, {rb: reg}, {rc: reg}  => le(0xF @ 0b010  @ rc @ rb @ ra)
	sbb {ra: reg}, {rb: reg}, {rc: reg}  => le(0xF @ 0b011  @ rc @ rb @ ra)
	bic {ra: reg}, {rb: reg}, {rc: reg}  => le(0xF @ 0b100  @ rc @ rb @ ra)
	bis {ra: reg}, {rb: reg}, {rc: reg}  => le(0xF @ 0b101  @ rc @ rb @ ra)
	xor {ra: reg}, {rb: reg}, {rc: reg}  => le(0xF @ 0b110  @ rc @ rb @ ra)
}

; All remaining opcodes have 0b1111_111 in the upper seven bits.

#ruledef ; YOPs are two-register operations affecting special registers and IO.
{
	lsp {ra: reg}, {rb: reg}  => le(0xF @ 0b111  @ 0b000 @ rb @ ra) ; load rA from SPR@rb
	lio {ra: reg}, {rb: reg}  => le(0xF @ 0b111  @ 0b001 @ rb @ ra) ; load rA from IO@rb
	ssp {ra: reg}, {rb: reg}  => le(0xF @ 0b111  @ 0b010 @ rb @ ra) ; store rA to SPR@rb
	sio {ra: reg}, {rb: reg}  => le(0xF @ 0b111  @ 0b011 @ rb @ ra) ; store rA to IO@rb
	y04 {ra: reg}, {rb: reg}  => le(0xF @ 0b111  @ 0b100 @ rb @ ra)
	y05 {ra: reg}, {rb: reg}  => le(0xF @ 0b111  @ 0b101 @ rb @ ra)
	y06 {ra: reg}, {rb: reg}  => le(0xF @ 0b111  @ 0b110 @ rb @ ra)
}

; All remaining instructions have 1's in the top 10 bits.

#ruledef ; ZOPs are one-register operations.
{
	not {ra: reg} => le(0xF @ 0b111 @ 0b111 @0b000 @ ra)
	neg {ra: reg} => le(0xF @ 0b111 @ 0b111 @0b001 @ ra)
	sxt {ra: reg} => le(0xF @ 0b111 @ 0b111 @0b010 @ ra)
	swb {ra: reg} => le(0xF @ 0b111 @ 0b111 @0b011 @ ra)
	lsr {ra: reg} => le(0xF @ 0b111 @ 0b111 @0b100 @ ra)
	lsl {ra: reg} => le(0xF @ 0b111 @ 0b111 @0b101 @ ra)
	asr {ra: reg} => le(0xF @ 0b111 @ 0b111 @0b110 @ ra)
}

; The remaining instructions have 1's in the top 13 bits and no operands.
; RTI is return from trap or interrupt. RTL (return link) is a jump to the
; link special register. It's an ordinary usermode instruction, useful for
; "leaf" functions that don't stack the link register. DIE generates an
; illegal instruction fault. The opcode 0 does too.

#ruledef ; VOPs are zero-register operations.
{
	rti => le(0xF @ 0b111 @ 0b111 @0b111 @ 0b000)
	rtl => le(0xF @ 0b111 @ 0b111 @0b111 @ 0b001)
	di  => le(0xF @ 0b111 @ 0b111 @0b111 @ 0b010)
	ei  => le(0xF @ 0b111 @ 0b111 @0b111 @ 0b011)
	hlt => le(0xF @ 0b111 @ 0b111 @0b111 @ 0b100)
	brk => le(0xF @ 0b111 @ 0b111 @0b111 @ 0b101)
	v06 => le(0xF @ 0b111 @ 0b111 @0b111 @ 0b110)
	die => le(0xF @ 0b111 @ 0b111 @0b111 @ 0b111)
}

; aliases

#ruledef ; aliases
{
	; load lower immediate actually add the immediate value to the target
	; register. Since the immediate is positive, no carry out of the low
	; six bits occurs. It can be used with lui to form ldi.
	lli {ra: reg}, {imm: imm6} => asm { adi {ra}, {ra}, {imm} }

	; ldi loads a 16-bit value to the target register via lui ; lli.
	ldi {ra: reg}, {imm: u16}  => 
	{
		upper_imm = (imm>>6)&0x3FF    ; imm10
		lower_imm = (imm&0x3F)`6      ; imm6
		asm { lui {ra}, {upper_imm} } @ asm { adi {ra}, {ra}, {lower_imm} }
	}

	; load short immediate adds the zero register to the immediate and 
	; stores the 16-bit result in the target register. It is useful for
	; addressing special register and IO spaces, each of which have 64
	; elements. E.g. lsi r3, 6 ; lio r1, r3 to load IO address 6 to r1.
	lsi {ra: reg}, {imm: imm6} => asm { adi {ra}, r0, {imm} }

	nop => asm { neg r0 }

	; for the instructions below, ms bits of 0b111_0 (0xE) is JLR.

	sys {imm: imm6} => { ; system call trap when both ra and rb are 0.
		i=imm
		assert(i>=0&&i<64, "sys: 64 > argument >= 0")
		assert(i&1!=1, "sys: argument must be even")
		le(0b111_0 @ i`6 @ 0b000 @ 0b000)
	}

	jsr {rb: reg}, {imm: u16} => { ; jsr rB, target (rB not zero)
		i=rb
		assert(i!=0, "r0 not permitted")
		upper_imm = (imm>>6)&0x3FF   ; imm10
		lower_imm = (imm&0x3F)`6     ; imm6
		asm{ lui {rb}, {upper_imm} } @ le(0b111_0 @ lower_imm @ rb @ 0b001)
	}

	jsr {rb: reg} =>  { ; jsr rB convenince syntax for imm == 0 (no lui)
		i=rb
		assert(i!=0, "r0 not permitted")
		le(0b111_0 @ 0b000_000 @ rb @ 0b001)
	}

	jmp {rb: reg}, {imm: u16} => { ; jmp rB, target (rB not zero)
		i=rb
		assert(i!=0, "r0 not permitted")
		upper_imm = (imm>>6)&0x3FF   ; imm10
		lower_imm = (imm&0x3F)`6     ; imm6
		asm{ lui {rb}, {upper_imm} } @ le(0b111_0 @ lower_imm @ rb @ 0b010)
	}

	jmp {rb: reg} => { ; jmp rB convenince syntax for imm == 0 (no lui)
		i=rb
		assert(i!=0, "r0 not permitted")
		le(0b111_0 @ 0b000_000 @ rb @  0b010)
	}

	ior {ra: reg}, {rb: reg}, {imm: imm6} => { ; io register read
		asm{ lli {rb}, {imm} } @ asm{ lio {ra}, {rb} }
	}

	iow {ra: reg}, {rb: reg}, {imm: imm6} => { ; io register write
		asm{ lli {rb}, {imm} } @ asm{ sio {ra}, {rb} }
	}

	srr {ra: reg}, {rb: reg}, {imm: imm6} => { ; special register read
		asm{ lli {rb}, {imm} } @ asm{ lsp {ra}, {rb} }
	}

	srw {ra: reg}, {rb: reg}, {imm: imm6} => { ; special register write
		asm{ lli {rb}, {imm} } @ asm{ ssp {ra}, {rb} }
	}

}

; Pseudos
; section switching is #bank code or #bank data
; labels are automatically aligned (words in user_code, bytes in user_data)
; .align is #align <bit-alignment>, e.g. .align 2 is #align 16
; .string is #d "string" (or "string\0"). Strings are utf-8
; label: string "four" is label: #d "four"
; and then len = $ - label ; len is 4 (5? nul terminated?)
; .byte is #d8
; .word is #d16
; .space is #res
; .set is #const or sym = expression

EOF

# I tries this to filter the very long error messages. Eventually I gave up
# and went back to just dumping them in entirety. They are often annoying
# but occasionally necessary. It can be added at the end of the customasm line.
# 2>&1 >/dev/null | (grep -E 'error|^[0-9]' || true)

customasm --color=off -o "${OUTPUT}" "${RULES}" $@

