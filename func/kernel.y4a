; kernel - loads a 0 in kernel space. Only the first kernel-mode
; MMU register is initialized by hardware, so this part of the
; kernel must fit in the first 4k word page.Only the code register
; is initialized; there must be no data memory references before
; MMU initialization, below.

#bank code

; 32 2-word vectors. First 8 are hardware interrupt priorities.
; Next 8 are hardware-discovered faults. Last 16 are SYS instructions.
; Kernel mode r5 is reserved for assembling vector jumps. It cannot
; be used for any other purpose. Interrupts are disabled here.

	jmp r5, _reset		; vec 0 - reset vector
	jmp r5, _hwint1	    ; vec 2 - interrupt priority 1
	jmp r5, _hwint2     ; vec 4 - interrupt priority 2
	jmp r5, _hwint3		; vec 6 - interrupt priority 3

	jmp r5, _hwint4		; vec 8 - interrupt priority 4
	jmp r5, _hwint5		; vec 10 - interrupt priority 5
	jmp r5, _hwint6		; vec 12 - interrupt priority 6
	jmp r5, _hwint7		; vec 14 - interrupt priority 7

    ; begin hardware discovered faults

	jmp r5, _illegal	; vec 16 - illegal instruction
	jmp r5, _mmufault   ; vec 18 - mmu fault
	jmp r5, _align      ; vec 20 - alignment fault
	jmp r5, _badtrap

	jmp r5, _badtrap	; vec 24
	jmp r5, _badtrap
	jmp r5, _badtrap
	jmp r5, _machine    ; vec 30

	; begin sys instructions

	jmp r5, _badsys     ; sys 32
	jmp r5, _badsys
	jmp r5, _badsys
	jmp r5, _badsys

	jmp r5, _badsys     ; sys 40
	jmp r5, _badsys
	jmp r5, _badsys
	jmp r5, _badsys

	jmp r5, _badsys     ; sys 48
	jmp r5, _badsys
	jmp r5, _badsys
	jmp r5, _badsys

	jmp r5, _badsys     ; sys 56
	jmp r5, _badsys
	jmp r5, _badsys
	jmp r5, _badsys     ; sys 62 and last

; Word 64 (byte 128) in memory. End of vectors. Begin code.

Irr     = 2				; Kernel only interrupt return register SPR
Icr     = 3				; Kernel only interrupt cause register SPR
Imr     = 4				; Kernel only interrupt mode register SPR
CCLS    = 6				; Cycle counter, lower short
CCMS    = 7				; Cycle counter, most significant short
MmuCtl1 = 8				; MMU control register

MC1EnProt = 0x01		; Enable protect mode (TBD)
MC1AccUser = 0x10		; Enable kernel access to user MMU registers

; Reset the system. The architecture guarantees only that at hardware
; initialization, the WUT-4 will be placed in kernel mode, will begin
; execution at 0, and that the MMU will map physical page 0 at kernel
; code address 0.
;
; The reset code here maps user code page 0 at physical word address
; 96*1024 (word address 192*1024) and user data page 0 at physical
; byte address 256*1024. This matches the behavior of the program
; loader built into the simulator which supports a tiny 4k code+data
; kernel and allows small test programs with up to 4k of code and 4k
; of data to execute in usermode without any other kernel memory
; management support after initialization.
;
; The MmuCtl1 register contains two defined bits. 0x0001 enables
; memory access control. This is not yet implemented. The bit at
; 0x0010 enables the kernel to write into the user mode MMU. This
; is implemented in the emulator.

; TODO add mapping for kernel data page 0 if necessary.

_reset:					; reset and start.
	lsi r2, MmuCtl1		; spr index of control register
	lsi r1, MC1AccUser	; 0x10 gives kernel access to user MMU
	ssp r1, r2			; write r2 to spr r1

	ldi r1, 0x18		; code 0x18_000 = 0x30_000 / 2 = 96kw (192kb)
	lsi r2, 32			; first user mode code MMU register
	ssp r1, r2			; store 0x18 to user MMU[0]

	ldi r1, 0x40		; 0x40_000 = 256k where loader put user data
	lsi r2, 48			; first data MMU register
	ssp r1, r2			; store 0x40 to user MMU[16] because MmuCtl1 == 0x10

	lsi r2, 8			; spr index of control register
	ssp r0, r2			; store 0 there so kernel can access its own MMU

	;ldi r1, FIXME      ; give the kernel a data page

	lsi r2, 2			; Spr address of Irr
	ssp r0, r2			; store 0 code address in Irr
	rti					; return to usermode at 0 (start user code)

_hwint1:
_hwint2:
_hwint3:
_hwint4:
_hwint5:
_hwint6:
_hwint7:
    die                 ; TODO hardware interrupts (not yet emulated)

_illegal:               ; TODO illegal instruction fault
_mmufault:				; TODO page fault and segmentation exception
_align:					; TODO alignment fault
_machine:				; TODO machine check
	die

_badsys:	            ; undefined sys instruction
_badtrap:	            ; undefined hardware detected fault
	die

; "Fast" system calls.

FASTSYS_MAX = 7 ; must be a power of 2 - 1 (mask)

; jump table for fastcalls. Must be in sync with sys.y4a

_fasttab:
#d16 _syserr ; sys FASTSYS ; 0 in r1 => error
#d16 exit    ; sys FASTSYS ; 1 in r1, exit code in r2
#d16 debug   ; sys FASTSYS ; 2 in r1 ; no arguments
#d16 putc    ; sys FASTSYS ; 3 in r1, byte in r2; can block
#d16 getc    ; sys FASTSYS ; 4 in r1, byte or error return in r1
#d16 _syserr ; 5
#d16 _syserr ; 6
#d16 _syserr ; 7

_fastsys:	 ; fast system calls
	; TODO copy user registers to kernel registers
	add r4, r0, r1
	lsi r5, FASTSYS_MAX
	bic r4, r4, r5 ; argument &= ^FASTSYS_MAX
	beq r4, r1, _1f ; if result != argument, skip
	jmp r4, _syserr ; oops, bad argument
_1f:
	ldi	r4, _fasttab
	add r4, r4, r1
	jmp r4

_syserr:
	die		; TODO undefined system call

; exit - exit code in r2
exit:
	hlt

; debug - simulator register dump - no arguments
debug:
	brk
    rti

; putc - byte in r2 TODO
putc:
	die

; getc - returned byte or error in r1
getc:
    die

